// ============================================================
// inferenceEngine.js (Versi Super Final - MindEase)
// ============================================================

// ------------------ Fungsi CF MYCIN ------------------
function combineCF(cf1, cf2) {
  if (cf1 === 0) return cf2;
  if (cf2 === 0) return cf1;
  if (cf1 > 0 && cf2 > 0) return cf1 + cf2 * (1 - cf1);
  if (cf1 < 0 && cf2 < 0) return cf1 + cf2 * (1 + cf1);
  return (cf1 + cf2) / (1 - Math.min(Math.abs(cf1), Math.abs(cf2)));
}

// ------------------ Load rules.json ------------------
async function loadKB(path = 'rules.json') {
  const res = await fetch(path);
  if (!res.ok) throw new Error('Gagal memuat rules.json');
  return await res.json();
}

// ------------------ Render daftar gejala ------------------
function renderSymptomsList(symptoms, containerId = 'symptoms-list') {
  const container = document.getElementById(containerId);
  if (!container) return;
  container.innerHTML = '';
  symptoms.forEach(s => {
    const wrapper = document.createElement('div');
    wrapper.className = 'symptom-item';
    wrapper.innerHTML = `
      <label>
        <input type="checkbox" class="symptom-checkbox" value="${s.id}">
        ${s.name}
      </label>
    `;
    container.appendChild(wrapper);
  });
}

// ------------------ Kumpulkan fakta user ------------------
function collectUserFactsSet() {
  const checked = Array.from(document.querySelectorAll('.symptom-checkbox:checked'));
  return new Set(checked.map(c => c.value));
}

// ------------------ Logika inferensi ------------------
function runInference(kb, userFactsSet) {
  const expert = {};
  (kb.symptoms || []).forEach(s => expert[s.id] = s.expert_cf);

  const diagMap = {};
  (kb.rules || []).forEach(rule => {
    const aktif = (rule.if || []).every(a => userFactsSet.has(a));
    if (!aktif) return;
    const cfVals = (rule.if || []).map(a => expert[a]).filter(v => typeof v === 'number');
    if (cfVals.length !== rule.if.length) return;
    const cfRule = Math.min(...cfVals);
    if (!diagMap[rule.then]) diagMap[rule.then] = cfRule;
    else diagMap[rule.then] = combineCF(diagMap[rule.then], cfRule);
  });
  return diagMap;
}

// ------------------ Deskripsi diagnosis ------------------
const diagnosisDescriptions = {
  "D1": {
    idn: "Depresi Vegetatif",
    eng: "Vegetative Depression",
    desc: "Ditandai gangguan fungsi tubuh seperti perubahan pola tidur, nafsu makan, kelelahan, dan penurunan energi. Sering memengaruhi rutinitas harian serta menurunkan produktivitas."
  },
  "D2": {
    idn: "Depresi Agitasi",
    eng: "Agitation Depression",
    desc: "Menunjukkan kegelisahan dan ketidakmampuan untuk tenang. Penderitanya mudah marah, gelisah, dan cemas berlebihan. Perlu perhatian agar tidak berkembang menjadi perilaku impulsif."
  },
  "D3": {
    idn: "Depresi Disritmik",
    eng: "Dysrhythmic Depression",
    desc: "Kondisi depresi kronis yang berlangsung lama dengan gejala ringan namun menetap. Ditandai suasana hati sedih berkepanjangan, kelelahan, dan kehilangan minat dalam aktivitas sehari-hari."
  },
  "D4": {
    idn: "Depresi Psikotik",
    eng: "Psychotic Depression",
    desc: "Depresi berat yang disertai gejala psikotik seperti halusinasi atau delusi. Termasuk kondisi serius yang membutuhkan penanganan profesional segera."
  }
};

// ------------------ Render hasil ------------------
function renderResultBox(kb, results) {
  const container = document.getElementById('result-area');
  if (!container) return;
  container.innerHTML = '';

  if (!results || Object.keys(results).length === 0) {
    container.innerHTML = `
      <div class="result-box">
        <h3>Hasil Analisis</h3>
        <p><strong>Tidak ditemukan indikasi depresi</strong> dari gejala yang kamu pilih.</p>
        <p>Namun, jika kamu merasa cemas atau tidak nyaman, pertimbangkan untuk berbicara dengan tenaga profesional.</p>
      </div>`;
    return;
  }

  const entries = Object.entries(results).sort((a, b) => b[1] - a[1]);
  const [topDiag, topCF] = entries[0];
  const detail = diagnosisDescriptions[topDiag] || { idn: topDiag, eng: '', desc: '' };

  container.innerHTML = `
    <div class="result-box">
      <h3>Hasil Analisis Kondisi Kamu</h3>
      <p><strong>${detail.idn}</strong> ${detail.eng ? `(${detail.eng})` : ''}</p>
      <p><strong>Tingkat keyakinan sistem:</strong> ${(topCF * 100).toFixed(2)}%</p>
      <div style="margin-top:10px;text-align:justify;">${detail.desc}</div>
      <p style="margin-top:10px;font-style:italic;">Catatan: Hasil ini bersifat indikatif awal, bukan diagnosis medis. Jika gejala menetap, sebaiknya konsultasi ke tenaga ahli.</p>
    </div>`;
  container.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

// ------------------ Tampilkan gejala berdasarkan gender ------------------
async function showSymptomsForGender(gender) {
  try {
    // SEMBUNYIKAN BAGIAN INFORMASI
    const infoSection = document.querySelector('.info-section');
    if (infoSection) infoSection.style.display = 'none';

    // Hapus section gejala lama jika sudah ada
    let oldSection = document.getElementById('gejalaSection');
    if (oldSection) {
      oldSection.remove();
    }

    // Jika masih ada sisa section lama (belum kehapus sempurna), hentikan
    oldSection = document.getElementById('gejalaSection');
    if (oldSection) return;

    // Load knowledge base
    const kb = await loadKB();
    const suffix = (gender === 'men') ? '_m' : '_f';
    const relevantRules = (kb.rules || []).filter(r => typeof r.id === 'string' && r.id.endsWith(suffix));
    const symptomSet = new Set();
    relevantRules.forEach(r => (r.if || []).forEach(sym => symptomSet.add(sym)));
    const symptomsToShow = (kb.symptoms || []).filter(s => symptomSet.has(s.id));

    // Buat section gejala baru
    const main = document.getElementById('mainContent');
    const section = document.createElement('section');
    section.id = 'gejalaSection';
    section.innerHTML = `
      <h2>Pilih Gejala yang Kamu Alami</h2>
      <p>Centang gejala yang sesuai dengan kondisimu.</p>
      <div id="symptoms-list" class="symptoms-grid"></div>
      <button id="diagnoseBtn" class="btn-primary" style="margin-top:15px;">Lihat Hasil Analisis</button>
      <div id="result-area" style="margin-top:20px;"></div>
    `;
    main.appendChild(section);
    renderSymptomsList(symptomsToShow, 'symptoms-list');

    // Tombol hasil analisis
    document.getElementById('diagnoseBtn').addEventListener('click', async () => {
      const facts = collectUserFactsSet();
      const kb2 = await loadKB();
      const results = runInference(kb2, facts);
      renderResultBox(kb2, results);
    });

    // Scroll halus ke bagian gejala
    setTimeout(() => {
      section.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }, 200);

  } catch (err) {
    console.error('Error:', err);
  }
}

// ------------------ Inisialisasi tombol ------------------
let currentGender = null; // mencegah render ulang ganda

document.addEventListener('DOMContentLoaded', () => {
  const startBtn = document.getElementById('startBtn');
  const hero = document.querySelector('.hero-section');
  const genderSection = document.getElementById('genderSection');
  const infoSection = document.querySelector('.info-section');

  if (genderSection) genderSection.classList.add('hidden');
  if (infoSection) infoSection.style.display = 'block'; // tampilkan saat halaman baru dibuka

  // Klik tombol "Mulai Pemeriksaan Diri"
  startBtn.addEventListener('click', () => {
    if (hero) hero.classList.add('hidden');
    genderSection.classList.remove('hidden');
    window.scrollTo({ top: genderSection.offsetTop - 20, behavior: 'smooth' });
  });

  // Tombol gender
  document.querySelectorAll('.gender-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const selectedGender = btn.getAttribute('data-gender');
      // Cegah render dua kali kalau section gejala sudah ada
      if (selectedGender === currentGender && document.getElementById('gejalaSection')) return;
      currentGender = selectedGender;

      genderSection.classList.add('hidden');
      showSymptomsForGender(selectedGender);
    });
  });
});

